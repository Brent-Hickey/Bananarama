@startuml

participant caller <<µservice>>
participant bondy_ws_handler_1 <<cowboy_ws_handler>>
participant "bondy_router 1\n(transient worker)" as bondy_router <<gen_fsm>>
participant tuplespace_queue
participant "bondy_router 2\n(transient worker)" as bondy_router_2 <<gen_fsm>>
participant bondy_ws_handler_2 <<cowboy_ws_handler>>
participant callee <<µservice>>

activate bondy_ws_handler_1
activate bondy_ws_handler_2
caller -> bondy_ws_handler_1: call(CallerID, CallReqId, ...)
activate bondy_router
bondy_ws_handler_1 -> bondy_router: call(CallerID, CallReqId, ...)
bondy_router -> tuplespace_queue: enqueue(invocations, #{\n caller_req_id, \n caller_pid\n}, #{key => InvReqId, ttl => 5000})
bondy_router -> bondy_ws_handler_2: invocation(InvReqId,...)
bondy_ws_handler_2 -> callee: invocation(InvReqId,...)
deactivate bondy_router
...wait(Timeout)...
callee -> bondy_ws_handler_2: yield(...,InvReqId,...)
activate bondy_router_2
bondy_ws_handler_2 -> bondy_router_2: yield(...,InvReqId,...)
bondy_router_2 -> tuplespace_queue: dequeue(invocations, #{key => InvReqId})
tuplespace_queue -> bondy_router_2: \#{\n caller_req_id, \n caller_pid\n router_pid}

bondy_router_2 -> bondy_ws_handler_1: result(CallReqId,...)
bondy_ws_handler_1 -> caller: result(CallReqId,...)
deactivate bondy_router
@enduml
